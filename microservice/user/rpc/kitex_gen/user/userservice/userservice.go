// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	user "douyin-project/microservice/user/rpc/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FindByName":   kitex.NewMethodInfo(findByNameHandler, newUserServiceFindByNameArgs, newUserServiceFindByNameResult, false),
		"FindByUserId": kitex.NewMethodInfo(findByUserIdHandler, newUserServiceFindByUserIdArgs, newUserServiceFindByUserIdResult, false),
		"Insert":       kitex.NewMethodInfo(insertHandler, newUserServiceInsertArgs, newUserServiceInsertResult, false),
		"Update":       kitex.NewMethodInfo(updateHandler, newUserServiceUpdateArgs, newUserServiceUpdateResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func findByNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFindByNameArgs)
	realResult := result.(*user.UserServiceFindByNameResult)
	success, err := handler.(user.UserService).FindByName(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFindByNameArgs() interface{} {
	return user.NewUserServiceFindByNameArgs()
}

func newUserServiceFindByNameResult() interface{} {
	return user.NewUserServiceFindByNameResult()
}

func findByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFindByUserIdArgs)
	realResult := result.(*user.UserServiceFindByUserIdResult)
	success, err := handler.(user.UserService).FindByUserId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFindByUserIdArgs() interface{} {
	return user.NewUserServiceFindByUserIdArgs()
}

func newUserServiceFindByUserIdResult() interface{} {
	return user.NewUserServiceFindByUserIdResult()
}

func insertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceInsertArgs)
	realResult := result.(*user.UserServiceInsertResult)
	success, err := handler.(user.UserService).Insert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceInsertArgs() interface{} {
	return user.NewUserServiceInsertArgs()
}

func newUserServiceInsertResult() interface{} {
	return user.NewUserServiceInsertResult()
}

func updateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUpdateArgs)
	realResult := result.(*user.UserServiceUpdateResult)
	success, err := handler.(user.UserService).Update(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUpdateArgs() interface{} {
	return user.NewUserServiceUpdateArgs()
}

func newUserServiceUpdateResult() interface{} {
	return user.NewUserServiceUpdateResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FindByName(ctx context.Context, req *user.FindByNameRequest) (r *user.FindByNameResp, err error) {
	var _args user.UserServiceFindByNameArgs
	_args.Req = req
	var _result user.UserServiceFindByNameResult
	if err = p.c.Call(ctx, "FindByName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindByUserId(ctx context.Context, req *user.FindByUserIdRequest) (r *user.FindByUserIdResp, err error) {
	var _args user.UserServiceFindByUserIdArgs
	_args.Req = req
	var _result user.UserServiceFindByUserIdResult
	if err = p.c.Call(ctx, "FindByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Insert(ctx context.Context, req *user.InsertRequest) (r *user.InsertResp, err error) {
	var _args user.UserServiceInsertArgs
	_args.Req = req
	var _result user.UserServiceInsertResult
	if err = p.c.Call(ctx, "Insert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Update(ctx context.Context, req *user.UpdateRequest) (r *user.UpdateResp, err error) {
	var _args user.UserServiceUpdateArgs
	_args.Req = req
	var _result user.UserServiceUpdateResult
	if err = p.c.Call(ctx, "Update", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
