// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favoriteservice

import (
	"context"
	favorite "douyin-project/microservice/favorite/rpc/kitex_gen/favorite"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FindByVideoIdAndUserId": kitex.NewMethodInfo(findByVideoIdAndUserIdHandler, newFavoriteServiceFindByVideoIdAndUserIdArgs, newFavoriteServiceFindByVideoIdAndUserIdResult, false),
		"FindByUserId":           kitex.NewMethodInfo(findByUserIdHandler, newFavoriteServiceFindByUserIdArgs, newFavoriteServiceFindByUserIdResult, false),
		"Insert":                 kitex.NewMethodInfo(insertHandler, newFavoriteServiceInsertArgs, newFavoriteServiceInsertResult, false),
		"Delete":                 kitex.NewMethodInfo(deleteHandler, newFavoriteServiceDeleteArgs, newFavoriteServiceDeleteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func findByVideoIdAndUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFindByVideoIdAndUserIdArgs)
	realResult := result.(*favorite.FavoriteServiceFindByVideoIdAndUserIdResult)
	success, err := handler.(favorite.FavoriteService).FindByVideoIdAndUserId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFindByVideoIdAndUserIdArgs() interface{} {
	return favorite.NewFavoriteServiceFindByVideoIdAndUserIdArgs()
}

func newFavoriteServiceFindByVideoIdAndUserIdResult() interface{} {
	return favorite.NewFavoriteServiceFindByVideoIdAndUserIdResult()
}

func findByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFindByUserIdArgs)
	realResult := result.(*favorite.FavoriteServiceFindByUserIdResult)
	success, err := handler.(favorite.FavoriteService).FindByUserId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFindByUserIdArgs() interface{} {
	return favorite.NewFavoriteServiceFindByUserIdArgs()
}

func newFavoriteServiceFindByUserIdResult() interface{} {
	return favorite.NewFavoriteServiceFindByUserIdResult()
}

func insertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceInsertArgs)
	realResult := result.(*favorite.FavoriteServiceInsertResult)
	success, err := handler.(favorite.FavoriteService).Insert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceInsertArgs() interface{} {
	return favorite.NewFavoriteServiceInsertArgs()
}

func newFavoriteServiceInsertResult() interface{} {
	return favorite.NewFavoriteServiceInsertResult()
}

func deleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceDeleteArgs)
	realResult := result.(*favorite.FavoriteServiceDeleteResult)
	success, err := handler.(favorite.FavoriteService).Delete(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceDeleteArgs() interface{} {
	return favorite.NewFavoriteServiceDeleteArgs()
}

func newFavoriteServiceDeleteResult() interface{} {
	return favorite.NewFavoriteServiceDeleteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FindByVideoIdAndUserId(ctx context.Context, req *favorite.FindByVideoIdAndUserIdRequest) (r *favorite.FindByVideoIdAndUserIdResp, err error) {
	var _args favorite.FavoriteServiceFindByVideoIdAndUserIdArgs
	_args.Req = req
	var _result favorite.FavoriteServiceFindByVideoIdAndUserIdResult
	if err = p.c.Call(ctx, "FindByVideoIdAndUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindByUserId(ctx context.Context, req *favorite.FindByUserIdRequest) (r *favorite.FindByUserIdResp, err error) {
	var _args favorite.FavoriteServiceFindByUserIdArgs
	_args.Req = req
	var _result favorite.FavoriteServiceFindByUserIdResult
	if err = p.c.Call(ctx, "FindByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Insert(ctx context.Context, req *favorite.InsertRequest) (r *favorite.InsertResp, err error) {
	var _args favorite.FavoriteServiceInsertArgs
	_args.Req = req
	var _result favorite.FavoriteServiceInsertResult
	if err = p.c.Call(ctx, "Insert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Delete(ctx context.Context, req *favorite.DeleteRequest) (r *favorite.DeleteResp, err error) {
	var _args favorite.FavoriteServiceDeleteArgs
	_args.Req = req
	var _result favorite.FavoriteServiceDeleteResult
	if err = p.c.Call(ctx, "Delete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
