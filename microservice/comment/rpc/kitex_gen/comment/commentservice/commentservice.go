// Code generated by Kitex v0.4.4. DO NOT EDIT.

package commentservice

import (
	"context"
	comment "douyin-project/microservice/comment/rpc/kitex_gen/comment"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Insert":                      kitex.NewMethodInfo(insertHandler, newCommentServiceInsertArgs, newCommentServiceInsertResult, false),
		"FindCommentByVideoIdLimit30": kitex.NewMethodInfo(findCommentByVideoIdLimit30Handler, newCommentServiceFindCommentByVideoIdLimit30Args, newCommentServiceFindCommentByVideoIdLimit30Result, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func insertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceInsertArgs)
	realResult := result.(*comment.CommentServiceInsertResult)
	success, err := handler.(comment.CommentService).Insert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceInsertArgs() interface{} {
	return comment.NewCommentServiceInsertArgs()
}

func newCommentServiceInsertResult() interface{} {
	return comment.NewCommentServiceInsertResult()
}

func findCommentByVideoIdLimit30Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceFindCommentByVideoIdLimit30Args)
	realResult := result.(*comment.CommentServiceFindCommentByVideoIdLimit30Result)
	success, err := handler.(comment.CommentService).FindCommentByVideoIdLimit30(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceFindCommentByVideoIdLimit30Args() interface{} {
	return comment.NewCommentServiceFindCommentByVideoIdLimit30Args()
}

func newCommentServiceFindCommentByVideoIdLimit30Result() interface{} {
	return comment.NewCommentServiceFindCommentByVideoIdLimit30Result()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Insert(ctx context.Context, req *comment.InsertRequest) (r *comment.InsertResp, err error) {
	var _args comment.CommentServiceInsertArgs
	_args.Req = req
	var _result comment.CommentServiceInsertResult
	if err = p.c.Call(ctx, "Insert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindCommentByVideoIdLimit30(ctx context.Context, req *comment.FindCommentByVideoIdLimit30Request) (r *comment.FindCommentByVideoIdLimit30Resp, err error) {
	var _args comment.CommentServiceFindCommentByVideoIdLimit30Args
	_args.Req = req
	var _result comment.CommentServiceFindCommentByVideoIdLimit30Result
	if err = p.c.Call(ctx, "FindCommentByVideoIdLimit30", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
