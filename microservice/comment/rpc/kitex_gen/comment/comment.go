// Code generated by thriftgo (0.2.1). DO NOT EDIT.

package comment

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Comment struct {
	Id      int64  `thrift:"Id,1,required" frugal:"1,required,i64" json:"Id"`
	VideoId int64  `thrift:"VideoId,2,required" frugal:"2,required,i64" json:"VideoId"`
	UserId  int64  `thrift:"UserId,3,required" frugal:"3,required,i64" json:"UserId"`
	Content string `thrift:"Content,4,required" frugal:"4,required,string" json:"Content"`
}

func NewComment() *Comment {
	return &Comment{}
}

func (p *Comment) InitDefault() {
	*p = Comment{}
}

func (p *Comment) GetId() (v int64) {
	return p.Id
}

func (p *Comment) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *Comment) GetUserId() (v int64) {
	return p.UserId
}

func (p *Comment) GetContent() (v string) {
	return p.Content
}
func (p *Comment) SetId(val int64) {
	p.Id = val
}
func (p *Comment) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *Comment) SetUserId(val int64) {
	p.UserId = val
}
func (p *Comment) SetContent(val string) {
	p.Content = val
}

var fieldIDToName_Comment = map[int16]string{
	1: "Id",
	2: "VideoId",
	3: "UserId",
	4: "Content",
}

func (p *Comment) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetId bool = false
	var issetVideoId bool = false
	var issetUserId bool = false
	var issetContent bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetVideoId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetContent = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetVideoId {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetUserId {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetContent {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Comment[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Comment[fieldId]))
}

func (p *Comment) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *Comment) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *Comment) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *Comment) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Content = v
	}
	return nil
}

func (p *Comment) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Comment"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Comment) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Comment) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VideoId", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Comment) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("UserId", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Comment) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Content", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Content); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Comment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Comment(%+v)", *p)
}

func (p *Comment) DeepEqual(ano *Comment) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field4DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *Comment) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Comment) Field2DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}
func (p *Comment) Field3DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *Comment) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}

type InsertRequest struct {
	Comment *Comment `thrift:"comment,1,required" frugal:"1,required,Comment" json:"comment"`
}

func NewInsertRequest() *InsertRequest {
	return &InsertRequest{}
}

func (p *InsertRequest) InitDefault() {
	*p = InsertRequest{}
}

var InsertRequest_Comment_DEFAULT *Comment

func (p *InsertRequest) GetComment() (v *Comment) {
	if !p.IsSetComment() {
		return InsertRequest_Comment_DEFAULT
	}
	return p.Comment
}
func (p *InsertRequest) SetComment(val *Comment) {
	p.Comment = val
}

var fieldIDToName_InsertRequest = map[int16]string{
	1: "comment",
}

func (p *InsertRequest) IsSetComment() bool {
	return p.Comment != nil
}

func (p *InsertRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetComment bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetComment = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetComment {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InsertRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_InsertRequest[fieldId]))
}

func (p *InsertRequest) ReadField1(iprot thrift.TProtocol) error {
	p.Comment = NewComment()
	if err := p.Comment.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *InsertRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InsertRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InsertRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("comment", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Comment.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InsertRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertRequest(%+v)", *p)
}

func (p *InsertRequest) DeepEqual(ano *InsertRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Comment) {
		return false
	}
	return true
}

func (p *InsertRequest) Field1DeepEqual(src *Comment) bool {

	if !p.Comment.DeepEqual(src) {
		return false
	}
	return true
}

type InsertResp struct {
	CommentId int64 `thrift:"CommentId,1,required" frugal:"1,required,i64" json:"CommentId"`
}

func NewInsertResp() *InsertResp {
	return &InsertResp{}
}

func (p *InsertResp) InitDefault() {
	*p = InsertResp{}
}

func (p *InsertResp) GetCommentId() (v int64) {
	return p.CommentId
}
func (p *InsertResp) SetCommentId(val int64) {
	p.CommentId = val
}

var fieldIDToName_InsertResp = map[int16]string{
	1: "CommentId",
}

func (p *InsertResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCommentId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCommentId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCommentId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InsertResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_InsertResp[fieldId]))
}

func (p *InsertResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CommentId = v
	}
	return nil
}

func (p *InsertResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InsertResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InsertResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("CommentId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CommentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *InsertResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InsertResp(%+v)", *p)
}

func (p *InsertResp) DeepEqual(ano *InsertResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CommentId) {
		return false
	}
	return true
}

func (p *InsertResp) Field1DeepEqual(src int64) bool {

	if p.CommentId != src {
		return false
	}
	return true
}

type FindCommentByVideoIdLimit30Request struct {
	VideoId int64 `thrift:"VideoId,1,required" frugal:"1,required,i64" json:"VideoId"`
}

func NewFindCommentByVideoIdLimit30Request() *FindCommentByVideoIdLimit30Request {
	return &FindCommentByVideoIdLimit30Request{}
}

func (p *FindCommentByVideoIdLimit30Request) InitDefault() {
	*p = FindCommentByVideoIdLimit30Request{}
}

func (p *FindCommentByVideoIdLimit30Request) GetVideoId() (v int64) {
	return p.VideoId
}
func (p *FindCommentByVideoIdLimit30Request) SetVideoId(val int64) {
	p.VideoId = val
}

var fieldIDToName_FindCommentByVideoIdLimit30Request = map[int16]string{
	1: "VideoId",
}

func (p *FindCommentByVideoIdLimit30Request) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVideoId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVideoId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVideoId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FindCommentByVideoIdLimit30Request[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FindCommentByVideoIdLimit30Request[fieldId]))
}

func (p *FindCommentByVideoIdLimit30Request) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *FindCommentByVideoIdLimit30Request) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindCommentByVideoIdLimit30Request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FindCommentByVideoIdLimit30Request) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("VideoId", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FindCommentByVideoIdLimit30Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindCommentByVideoIdLimit30Request(%+v)", *p)
}

func (p *FindCommentByVideoIdLimit30Request) DeepEqual(ano *FindCommentByVideoIdLimit30Request) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	return true
}

func (p *FindCommentByVideoIdLimit30Request) Field1DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}

type FindCommentByVideoIdLimit30Resp struct {
	CommentList []*Comment `thrift:"commentList,1" frugal:"1,default,list<Comment>" json:"commentList"`
}

func NewFindCommentByVideoIdLimit30Resp() *FindCommentByVideoIdLimit30Resp {
	return &FindCommentByVideoIdLimit30Resp{}
}

func (p *FindCommentByVideoIdLimit30Resp) InitDefault() {
	*p = FindCommentByVideoIdLimit30Resp{}
}

func (p *FindCommentByVideoIdLimit30Resp) GetCommentList() (v []*Comment) {
	return p.CommentList
}
func (p *FindCommentByVideoIdLimit30Resp) SetCommentList(val []*Comment) {
	p.CommentList = val
}

var fieldIDToName_FindCommentByVideoIdLimit30Resp = map[int16]string{
	1: "commentList",
}

func (p *FindCommentByVideoIdLimit30Resp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FindCommentByVideoIdLimit30Resp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FindCommentByVideoIdLimit30Resp) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CommentList = make([]*Comment, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewComment()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.CommentList = append(p.CommentList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *FindCommentByVideoIdLimit30Resp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindCommentByVideoIdLimit30Resp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FindCommentByVideoIdLimit30Resp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("commentList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CommentList)); err != nil {
		return err
	}
	for _, v := range p.CommentList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *FindCommentByVideoIdLimit30Resp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindCommentByVideoIdLimit30Resp(%+v)", *p)
}

func (p *FindCommentByVideoIdLimit30Resp) DeepEqual(ano *FindCommentByVideoIdLimit30Resp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CommentList) {
		return false
	}
	return true
}

func (p *FindCommentByVideoIdLimit30Resp) Field1DeepEqual(src []*Comment) bool {

	if len(p.CommentList) != len(src) {
		return false
	}
	for i, v := range p.CommentList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CommentService interface {
	Insert(ctx context.Context, req *InsertRequest) (r *InsertResp, err error)

	FindCommentByVideoIdLimit30(ctx context.Context, req *FindCommentByVideoIdLimit30Request) (r *FindCommentByVideoIdLimit30Resp, err error)
}

type CommentServiceClient struct {
	c thrift.TClient
}

func NewCommentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CommentServiceClient {
	return &CommentServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewCommentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CommentServiceClient {
	return &CommentServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewCommentServiceClient(c thrift.TClient) *CommentServiceClient {
	return &CommentServiceClient{
		c: c,
	}
}

func (p *CommentServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *CommentServiceClient) Insert(ctx context.Context, req *InsertRequest) (r *InsertResp, err error) {
	var _args CommentServiceInsertArgs
	_args.Req = req
	var _result CommentServiceInsertResult
	if err = p.Client_().Call(ctx, "Insert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *CommentServiceClient) FindCommentByVideoIdLimit30(ctx context.Context, req *FindCommentByVideoIdLimit30Request) (r *FindCommentByVideoIdLimit30Resp, err error) {
	var _args CommentServiceFindCommentByVideoIdLimit30Args
	_args.Req = req
	var _result CommentServiceFindCommentByVideoIdLimit30Result
	if err = p.Client_().Call(ctx, "FindCommentByVideoIdLimit30", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type CommentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CommentService
}

func (p *CommentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CommentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CommentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCommentServiceProcessor(handler CommentService) *CommentServiceProcessor {
	self := &CommentServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Insert", &commentServiceProcessorInsert{handler: handler})
	self.AddToProcessorMap("FindCommentByVideoIdLimit30", &commentServiceProcessorFindCommentByVideoIdLimit30{handler: handler})
	return self
}
func (p *CommentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type commentServiceProcessorInsert struct {
	handler CommentService
}

func (p *commentServiceProcessorInsert) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommentServiceInsertArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Insert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommentServiceInsertResult{}
	var retval *InsertResp
	if retval, err2 = p.handler.Insert(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Insert: "+err2.Error())
		oprot.WriteMessageBegin("Insert", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Insert", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type commentServiceProcessorFindCommentByVideoIdLimit30 struct {
	handler CommentService
}

func (p *commentServiceProcessorFindCommentByVideoIdLimit30) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CommentServiceFindCommentByVideoIdLimit30Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindCommentByVideoIdLimit30", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := CommentServiceFindCommentByVideoIdLimit30Result{}
	var retval *FindCommentByVideoIdLimit30Resp
	if retval, err2 = p.handler.FindCommentByVideoIdLimit30(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindCommentByVideoIdLimit30: "+err2.Error())
		oprot.WriteMessageBegin("FindCommentByVideoIdLimit30", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FindCommentByVideoIdLimit30", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type CommentServiceInsertArgs struct {
	Req *InsertRequest `thrift:"req,1" frugal:"1,default,InsertRequest" json:"req"`
}

func NewCommentServiceInsertArgs() *CommentServiceInsertArgs {
	return &CommentServiceInsertArgs{}
}

func (p *CommentServiceInsertArgs) InitDefault() {
	*p = CommentServiceInsertArgs{}
}

var CommentServiceInsertArgs_Req_DEFAULT *InsertRequest

func (p *CommentServiceInsertArgs) GetReq() (v *InsertRequest) {
	if !p.IsSetReq() {
		return CommentServiceInsertArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *CommentServiceInsertArgs) SetReq(val *InsertRequest) {
	p.Req = val
}

var fieldIDToName_CommentServiceInsertArgs = map[int16]string{
	1: "req",
}

func (p *CommentServiceInsertArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentServiceInsertArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommentServiceInsertArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommentServiceInsertArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewInsertRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CommentServiceInsertArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Insert_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommentServiceInsertArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommentServiceInsertArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentServiceInsertArgs(%+v)", *p)
}

func (p *CommentServiceInsertArgs) DeepEqual(ano *CommentServiceInsertArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommentServiceInsertArgs) Field1DeepEqual(src *InsertRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CommentServiceInsertResult struct {
	Success *InsertResp `thrift:"success,0,optional" frugal:"0,optional,InsertResp" json:"success,omitempty"`
}

func NewCommentServiceInsertResult() *CommentServiceInsertResult {
	return &CommentServiceInsertResult{}
}

func (p *CommentServiceInsertResult) InitDefault() {
	*p = CommentServiceInsertResult{}
}

var CommentServiceInsertResult_Success_DEFAULT *InsertResp

func (p *CommentServiceInsertResult) GetSuccess() (v *InsertResp) {
	if !p.IsSetSuccess() {
		return CommentServiceInsertResult_Success_DEFAULT
	}
	return p.Success
}
func (p *CommentServiceInsertResult) SetSuccess(x interface{}) {
	p.Success = x.(*InsertResp)
}

var fieldIDToName_CommentServiceInsertResult = map[int16]string{
	0: "success",
}

func (p *CommentServiceInsertResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentServiceInsertResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommentServiceInsertResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommentServiceInsertResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewInsertResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CommentServiceInsertResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Insert_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommentServiceInsertResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommentServiceInsertResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentServiceInsertResult(%+v)", *p)
}

func (p *CommentServiceInsertResult) DeepEqual(ano *CommentServiceInsertResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommentServiceInsertResult) Field0DeepEqual(src *InsertResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type CommentServiceFindCommentByVideoIdLimit30Args struct {
	Req *FindCommentByVideoIdLimit30Request `thrift:"req,1" frugal:"1,default,FindCommentByVideoIdLimit30Request" json:"req"`
}

func NewCommentServiceFindCommentByVideoIdLimit30Args() *CommentServiceFindCommentByVideoIdLimit30Args {
	return &CommentServiceFindCommentByVideoIdLimit30Args{}
}

func (p *CommentServiceFindCommentByVideoIdLimit30Args) InitDefault() {
	*p = CommentServiceFindCommentByVideoIdLimit30Args{}
}

var CommentServiceFindCommentByVideoIdLimit30Args_Req_DEFAULT *FindCommentByVideoIdLimit30Request

func (p *CommentServiceFindCommentByVideoIdLimit30Args) GetReq() (v *FindCommentByVideoIdLimit30Request) {
	if !p.IsSetReq() {
		return CommentServiceFindCommentByVideoIdLimit30Args_Req_DEFAULT
	}
	return p.Req
}
func (p *CommentServiceFindCommentByVideoIdLimit30Args) SetReq(val *FindCommentByVideoIdLimit30Request) {
	p.Req = val
}

var fieldIDToName_CommentServiceFindCommentByVideoIdLimit30Args = map[int16]string{
	1: "req",
}

func (p *CommentServiceFindCommentByVideoIdLimit30Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *CommentServiceFindCommentByVideoIdLimit30Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommentServiceFindCommentByVideoIdLimit30Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommentServiceFindCommentByVideoIdLimit30Args) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewFindCommentByVideoIdLimit30Request()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CommentServiceFindCommentByVideoIdLimit30Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindCommentByVideoIdLimit30_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommentServiceFindCommentByVideoIdLimit30Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CommentServiceFindCommentByVideoIdLimit30Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentServiceFindCommentByVideoIdLimit30Args(%+v)", *p)
}

func (p *CommentServiceFindCommentByVideoIdLimit30Args) DeepEqual(ano *CommentServiceFindCommentByVideoIdLimit30Args) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *CommentServiceFindCommentByVideoIdLimit30Args) Field1DeepEqual(src *FindCommentByVideoIdLimit30Request) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type CommentServiceFindCommentByVideoIdLimit30Result struct {
	Success *FindCommentByVideoIdLimit30Resp `thrift:"success,0,optional" frugal:"0,optional,FindCommentByVideoIdLimit30Resp" json:"success,omitempty"`
}

func NewCommentServiceFindCommentByVideoIdLimit30Result() *CommentServiceFindCommentByVideoIdLimit30Result {
	return &CommentServiceFindCommentByVideoIdLimit30Result{}
}

func (p *CommentServiceFindCommentByVideoIdLimit30Result) InitDefault() {
	*p = CommentServiceFindCommentByVideoIdLimit30Result{}
}

var CommentServiceFindCommentByVideoIdLimit30Result_Success_DEFAULT *FindCommentByVideoIdLimit30Resp

func (p *CommentServiceFindCommentByVideoIdLimit30Result) GetSuccess() (v *FindCommentByVideoIdLimit30Resp) {
	if !p.IsSetSuccess() {
		return CommentServiceFindCommentByVideoIdLimit30Result_Success_DEFAULT
	}
	return p.Success
}
func (p *CommentServiceFindCommentByVideoIdLimit30Result) SetSuccess(x interface{}) {
	p.Success = x.(*FindCommentByVideoIdLimit30Resp)
}

var fieldIDToName_CommentServiceFindCommentByVideoIdLimit30Result = map[int16]string{
	0: "success",
}

func (p *CommentServiceFindCommentByVideoIdLimit30Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CommentServiceFindCommentByVideoIdLimit30Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommentServiceFindCommentByVideoIdLimit30Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommentServiceFindCommentByVideoIdLimit30Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewFindCommentByVideoIdLimit30Resp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CommentServiceFindCommentByVideoIdLimit30Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FindCommentByVideoIdLimit30_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommentServiceFindCommentByVideoIdLimit30Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *CommentServiceFindCommentByVideoIdLimit30Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommentServiceFindCommentByVideoIdLimit30Result(%+v)", *p)
}

func (p *CommentServiceFindCommentByVideoIdLimit30Result) DeepEqual(ano *CommentServiceFindCommentByVideoIdLimit30Result) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *CommentServiceFindCommentByVideoIdLimit30Result) Field0DeepEqual(src *FindCommentByVideoIdLimit30Resp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
