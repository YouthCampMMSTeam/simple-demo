// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	video "douyin-project/microservice/video/rpc/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FindOrderByTime":       kitex.NewMethodInfo(findOrderByTimeHandler, newVideoServiceFindOrderByTimeArgs, newVideoServiceFindOrderByTimeResult, false),
		"FindByVideoId":         kitex.NewMethodInfo(findByVideoIdHandler, newVideoServiceFindByVideoIdArgs, newVideoServiceFindByVideoIdResult, false),
		"FindByUserId":          kitex.NewMethodInfo(findByUserIdHandler, newVideoServiceFindByUserIdArgs, newVideoServiceFindByUserIdResult, false),
		"Insert":                kitex.NewMethodInfo(insertHandler, newVideoServiceInsertArgs, newVideoServiceInsertResult, false),
		"Update":                kitex.NewMethodInfo(updateHandler, newVideoServiceUpdateArgs, newVideoServiceUpdateResult, false),
		"FavoriteCountModified": kitex.NewMethodInfo(favoriteCountModifiedHandler, newVideoServiceFavoriteCountModifiedArgs, newVideoServiceFavoriteCountModifiedResult, false),
		"CommentCountModified":  kitex.NewMethodInfo(commentCountModifiedHandler, newVideoServiceCommentCountModifiedArgs, newVideoServiceCommentCountModifiedResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func findOrderByTimeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFindOrderByTimeArgs)
	realResult := result.(*video.VideoServiceFindOrderByTimeResult)
	success, err := handler.(video.VideoService).FindOrderByTime(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFindOrderByTimeArgs() interface{} {
	return video.NewVideoServiceFindOrderByTimeArgs()
}

func newVideoServiceFindOrderByTimeResult() interface{} {
	return video.NewVideoServiceFindOrderByTimeResult()
}

func findByVideoIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFindByVideoIdArgs)
	realResult := result.(*video.VideoServiceFindByVideoIdResult)
	success, err := handler.(video.VideoService).FindByVideoId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFindByVideoIdArgs() interface{} {
	return video.NewVideoServiceFindByVideoIdArgs()
}

func newVideoServiceFindByVideoIdResult() interface{} {
	return video.NewVideoServiceFindByVideoIdResult()
}

func findByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFindByUserIdArgs)
	realResult := result.(*video.VideoServiceFindByUserIdResult)
	success, err := handler.(video.VideoService).FindByUserId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFindByUserIdArgs() interface{} {
	return video.NewVideoServiceFindByUserIdArgs()
}

func newVideoServiceFindByUserIdResult() interface{} {
	return video.NewVideoServiceFindByUserIdResult()
}

func insertHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceInsertArgs)
	realResult := result.(*video.VideoServiceInsertResult)
	success, err := handler.(video.VideoService).Insert(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceInsertArgs() interface{} {
	return video.NewVideoServiceInsertArgs()
}

func newVideoServiceInsertResult() interface{} {
	return video.NewVideoServiceInsertResult()
}

func updateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceUpdateArgs)
	realResult := result.(*video.VideoServiceUpdateResult)
	success, err := handler.(video.VideoService).Update(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceUpdateArgs() interface{} {
	return video.NewVideoServiceUpdateArgs()
}

func newVideoServiceUpdateResult() interface{} {
	return video.NewVideoServiceUpdateResult()
}

func favoriteCountModifiedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFavoriteCountModifiedArgs)
	realResult := result.(*video.VideoServiceFavoriteCountModifiedResult)
	success, err := handler.(video.VideoService).FavoriteCountModified(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteCountModifiedArgs() interface{} {
	return video.NewVideoServiceFavoriteCountModifiedArgs()
}

func newVideoServiceFavoriteCountModifiedResult() interface{} {
	return video.NewVideoServiceFavoriteCountModifiedResult()
}

func commentCountModifiedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceCommentCountModifiedArgs)
	realResult := result.(*video.VideoServiceCommentCountModifiedResult)
	success, err := handler.(video.VideoService).CommentCountModified(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCommentCountModifiedArgs() interface{} {
	return video.NewVideoServiceCommentCountModifiedArgs()
}

func newVideoServiceCommentCountModifiedResult() interface{} {
	return video.NewVideoServiceCommentCountModifiedResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FindOrderByTime(ctx context.Context, req *video.FindOrderByTimeReq) (r *video.FindOrderByTimeResp, err error) {
	var _args video.VideoServiceFindOrderByTimeArgs
	_args.Req = req
	var _result video.VideoServiceFindOrderByTimeResult
	if err = p.c.Call(ctx, "FindOrderByTime", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindByVideoId(ctx context.Context, req *video.FindByVideoIdReq) (r *video.FindByVideoIdResp, err error) {
	var _args video.VideoServiceFindByVideoIdArgs
	_args.Req = req
	var _result video.VideoServiceFindByVideoIdResult
	if err = p.c.Call(ctx, "FindByVideoId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FindByUserId(ctx context.Context, req *video.FindByUserIdReq) (r *video.FindByUserIdResp, err error) {
	var _args video.VideoServiceFindByUserIdArgs
	_args.Req = req
	var _result video.VideoServiceFindByUserIdResult
	if err = p.c.Call(ctx, "FindByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Insert(ctx context.Context, req *video.InsertReq) (r *video.InsertResp, err error) {
	var _args video.VideoServiceInsertArgs
	_args.Req = req
	var _result video.VideoServiceInsertResult
	if err = p.c.Call(ctx, "Insert", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Update(ctx context.Context, req *video.UpdateReq) (r *video.UpdateResp, err error) {
	var _args video.VideoServiceUpdateArgs
	_args.Req = req
	var _result video.VideoServiceUpdateResult
	if err = p.c.Call(ctx, "Update", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteCountModified(ctx context.Context, req *video.FavoriteCountModifiedReq) (r *video.FavoriteCountModifiedResp, err error) {
	var _args video.VideoServiceFavoriteCountModifiedArgs
	_args.Req = req
	var _result video.VideoServiceFavoriteCountModifiedResult
	if err = p.c.Call(ctx, "FavoriteCountModified", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentCountModified(ctx context.Context, req *video.CommentCountModifiedReq) (r *video.CommentCountModifiedResp, err error) {
	var _args video.VideoServiceCommentCountModifiedArgs
	_args.Req = req
	var _result video.VideoServiceCommentCountModifiedResult
	if err = p.c.Call(ctx, "CommentCountModified", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
