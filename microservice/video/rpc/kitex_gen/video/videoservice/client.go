// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	video "douyin-project/microservice/video/rpc/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FindOrderByTime(ctx context.Context, req *video.FindOrderByTimeReq, callOptions ...callopt.Option) (r *video.FindOrderByTimeResp, err error)
	FindWithTimeLimit(ctx context.Context, req *video.FindWithTimeLimitReq, callOptions ...callopt.Option) (r *video.FindWithTimeLimitResp, err error)
	FindByVideoId(ctx context.Context, req *video.FindByVideoIdReq, callOptions ...callopt.Option) (r *video.FindByVideoIdResp, err error)
	FindByUserId(ctx context.Context, req *video.FindByUserIdReq, callOptions ...callopt.Option) (r *video.FindByUserIdResp, err error)
	Insert(ctx context.Context, req *video.InsertReq, callOptions ...callopt.Option) (r *video.InsertResp, err error)
	Update(ctx context.Context, req *video.UpdateReq, callOptions ...callopt.Option) (r *video.UpdateResp, err error)
	FavoriteCountModified(ctx context.Context, req *video.FavoriteCountModifiedReq, callOptions ...callopt.Option) (r *video.FavoriteCountModifiedResp, err error)
	CommentCountModified(ctx context.Context, req *video.CommentCountModifiedReq, callOptions ...callopt.Option) (r *video.CommentCountModifiedResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) FindOrderByTime(ctx context.Context, req *video.FindOrderByTimeReq, callOptions ...callopt.Option) (r *video.FindOrderByTimeResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindOrderByTime(ctx, req)
}

func (p *kVideoServiceClient) FindWithTimeLimit(ctx context.Context, req *video.FindWithTimeLimitReq, callOptions ...callopt.Option) (r *video.FindWithTimeLimitResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindWithTimeLimit(ctx, req)
}

func (p *kVideoServiceClient) FindByVideoId(ctx context.Context, req *video.FindByVideoIdReq, callOptions ...callopt.Option) (r *video.FindByVideoIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindByVideoId(ctx, req)
}

func (p *kVideoServiceClient) FindByUserId(ctx context.Context, req *video.FindByUserIdReq, callOptions ...callopt.Option) (r *video.FindByUserIdResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindByUserId(ctx, req)
}

func (p *kVideoServiceClient) Insert(ctx context.Context, req *video.InsertReq, callOptions ...callopt.Option) (r *video.InsertResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Insert(ctx, req)
}

func (p *kVideoServiceClient) Update(ctx context.Context, req *video.UpdateReq, callOptions ...callopt.Option) (r *video.UpdateResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Update(ctx, req)
}

func (p *kVideoServiceClient) FavoriteCountModified(ctx context.Context, req *video.FavoriteCountModifiedReq, callOptions ...callopt.Option) (r *video.FavoriteCountModifiedResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteCountModified(ctx, req)
}

func (p *kVideoServiceClient) CommentCountModified(ctx context.Context, req *video.CommentCountModifiedReq, callOptions ...callopt.Option) (r *video.CommentCountModifiedResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentCountModified(ctx, req)
}
